/**
 * @file        src/app/ImGuiAboutDialog.cc
 * @license     zlib (view the LICENSE file for details)
 * @copyright   Trezanik Developers, 2014-2025
 */


#include "app/definitions.h"

#if TZK_USING_IMGUI

#include "app/ImGuiAboutDialog.h"
#include "app/AppConfigDefs.h"
#include "app/version.h"

#include "engine/Context.h"
#include "engine/services/event/Event.h"
#include "engine/services/event/EventManager.h"
#include "engine/services/ServiceLocator.h"

#include "core/services/log/Log.h"
#include "core/util/string/string.h"


namespace trezanik {
namespace app {


ImGuiAboutDialog::ImGuiAboutDialog(
	GuiInteractions& gui_interactions
)
: IImGui(gui_interactions)
, my_open(true)
, my_open_source_license(false)
{
	using namespace trezanik::core;
	using namespace trezanik::engine;

	TZK_LOG(LogLevel::Trace, "Constructor starting");
	{
		_gui_interactions.about_dialog = this;


		// we need to receive resource load notifications
		engine::ServiceLocator::EventManager()->AddListener(this, EventType::Domain::Engine);


		Context&     ctx = Context::GetSingleton();
		std::string  fpath = aux::BuildPath(ctx.AssetPath() + assetdir_images, "app_icon-128x128.png");
		auto         id = ctx.GetResourceCache().GetResourceID(fpath.c_str());

		// if not in the cache, trigger the load (could be a re-open, used elsewhere)
		if ( id == null_id )
		{
			auto   res = std::make_shared<Resource_Image>(fpath);
			auto&  ldr = ctx.GetResourceLoader();

			if ( ldr.AddResource(std::dynamic_pointer_cast<Resource>(res)) == ErrNONE )
			{
				// track the resource so we can assign it when ready
				my_icon_resource_id = res->GetResourceID();
				ldr.Sync();
			}
		}
		else
		{
			my_icon = std::dynamic_pointer_cast<Resource_Image>(ctx.GetResourceCache().GetResource(id));
		}
	}
	TZK_LOG(LogLevel::Trace, "Constructor finished");
}


ImGuiAboutDialog::~ImGuiAboutDialog()
{
	using namespace trezanik::core;

	TZK_LOG(LogLevel::Trace, "Destructor starting");
	{
		_gui_interactions.about_dialog = nullptr;

		engine::ServiceLocator::EventManager()->RemoveListener(this);
	}
	TZK_LOG(LogLevel::Trace, "Destructor finished");
}


void
ImGuiAboutDialog::Draw()
{
	using namespace trezanik::core;
	using namespace trezanik::engine;

	char  about_popup[] = "About";
	char  license_popup[] = "zlib license";

	// use Begin instead of a popup? any reason for being this way?
	if ( my_open )
	{
		ImGui::OpenPopup(about_popup);
		my_open = false;
	}

	ImGui::SetNextWindowSize(ImVec2(ImGui::GetIO().DisplaySize.x * .75f, ImGui::GetIO().DisplaySize.y * .75f), ImGuiCond_Appearing);

	if ( ImGui::BeginPopupModal(about_popup) )
	{
		// application icon
		if ( my_icon != nullptr )
		{
			int  h = my_icon->Height();
			int  w = my_icon->Width();
			ImGui::Text("Image: %d x %d", w, h);
			ImGui::Image((void*)my_icon->AsSDLTexture(), ImVec2(static_cast<float>(w), static_cast<float>(h)));
		}
		ImGui::SameLine();
		ImGui::SeparatorEx(ImGuiSeparatorFlags_Vertical);
		ImGui::SameLine();
		// build details
		{
			ImGui::Text("%sIsochrone %s %s (%s)\n\t%s\n\t%s",
				app::dirty ? "[Dirty Build] " : "",
				app::file_version.c_str(),
				"ALPHA", ///< @todo integrate from external
				app::product_version.c_str(),
				app::copyright.c_str(),
				app::url.c_str()
			);


			std::string  prefix = ""; // \t for log
			std::stringstream  ss;

#define TZK_SS_DEFINES(def)  ss << prefix << #def << ": " << def << "\n"
			TZK_SS_DEFINES(TZK_USING_FREETYPE);
			TZK_SS_DEFINES(TZK_USING_IMGUI);
			TZK_SS_DEFINES(TZK_USING_LIBPNG);
			TZK_SS_DEFINES(TZK_USING_OGGOPUS);
			TZK_SS_DEFINES(TZK_USING_OGGVORBIS);
			TZK_SS_DEFINES(TZK_USING_OPENALSOFT);
			TZK_SS_DEFINES(TZK_USING_OPENSSL);
			TZK_SS_DEFINES(TZK_USING_PUGIXML);
			TZK_SS_DEFINES(TZK_USING_SDL);
			TZK_SS_DEFINES(TZK_USING_SDL_TTF);
			TZK_SS_DEFINES(TZK_USING_SQLITE);
			TZK_SS_DEFINES(TZK_USING_STBI);
			//TZK_SS_DEFINES(TZK_USING_ZLIB);
			ImGui::Text("Compile Definitions:\n%s", ss.str().c_str());
#undef TZK_SS_DEFINES

			// names are from meson options, and same order as generated by generate_configure_h.sh
			ss.str("");
			ss << prefix << "LogEvent-Pool: " << TZK_LOGEVENT_POOL << "\n";
			ss << prefix << "LogEvent-Pool-InitialSize: " << TZK_LOG_POOL_INITIAL_SIZE << "\n";
			ss << prefix << "Audio-VerboseTraceLogs: " << TZK_AUDIO_LOG_TRACING << "\n";
			ss << prefix << "Audio-StackBufferSize: " << TZK_AUDIO_STACK_BUFFER_SIZE << "\n";
			ss << prefix << "Audio-RingBuffer-MinimumBufferSize: " << TZK_AUDIO_RINGBUFFER_MIN_BUFFER_SIZE << "\n";
			ss << prefix << "Audio-RingBuffer-TargetDuration: " << TZK_AUDIO_RINGBUFFER_TARGET_DURATION << "\n";
			ss << prefix << "Audio-RingBuffer-WaveStreamThreshold: " << TZK_AUDIO_WAV_STREAM_THRESHOLD << "\n";
			ss << prefix << "DefaultFPSCap: " << TZK_DEFAULT_FPS_CAP << "\n";
			ss << prefix << "PauseSleepDuration: " << TZK_PAUSE_SLEEP_DURATION << "\n";
			ss << prefix << "ResourceLoader-MaximumThreads: " << TZK_RESOURCES_MAX_LOADER_THREADS << "\n";
			ss << prefix << "Image-MaximumFileSize: " << TZK_IMAGE_MAX_FILE_SIZE << "\n";
			ss << prefix << "MouseMove-VerboseTraceLogs: " << TZK_MOUSEMOVE_LOGS << "\n";
			ss << prefix << "OpenAL-SourceCount: " << TZK_OPENAL_SOURCE_COUNT << "\n";
			ss << prefix << "ThreadedRender: " << TZK_THREADED_RENDER << "\n";
			ss << prefix << "Window-MinimumHeight: " << TZK_WINDOW_MINIMUM_HEIGHT << "\n";
			ss << prefix << "Window-MinimumWidth: " << TZK_WINDOW_MINIMUM_WIDTH << "\n";
			ss << prefix << "DefaultNewNode-Height: " << TZK_WINDOW_DEFAULT_NEWNODE_HEIGHT << "\n";
			ss << prefix << "DefaultNewNode-Width: " << TZK_WINDOW_DEFAULT_NEWNODE_WIDTH << "\n";

			ImGui::SameLine();
			ImGui::Text("Compile Configuration:\n%s", ss.str().c_str());


		}

		ImGui::Separator();
		ImGui::Text("Acknowledgements/Credits:");
		ImGui::Text("We would like to acknowledge the following projects/people, for their contributions to open-source.");
		ImGui::Text("Some of their code/ideas are used to create this project, which may not exist otherwise:");
		ImGui::Indent();

		/*
		 * This feels way too complex for what should be a simple thing, but I'm
		 * conscious of scrolling needs
		 */
		ImGuiTableFlags  table_flags = ImGuiTableFlags_RowBg;
		int  num_cols = 3;
		if ( ImGui::BeginTable("Acknowledgements", num_cols, table_flags) )
		{
			ImGuiTableColumnFlags  col_flags = ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_NoSort;
			ImGui::TableSetupColumn("", col_flags);
			ImGui::TableSetupColumn("", col_flags);
			ImGui::TableSetupColumn("", col_flags);
			ImGui::TableNextColumn();

			// no particular order, just as I thought of them

			ImGui::Text("OpenBSD");
			ImGui::TableNextColumn();
			ImGui::Text("Secure strings code and general mindset");
			ImGui::TableNextColumn();
			ImGui::Text("https://www.openbsd.org/");
			ImGui::TableNextColumn();

			ImGui::Text("Ocornut");
			ImGui::TableNextColumn();
			ImGui::Text("dear imgui, a platform agnostic GUI");
			ImGui::TableNextColumn();
			ImGui::Text("https://github.com/ocornut/imgui");
			ImGui::TableNextColumn();

			ImGui::Text("Gabriele Torelli (Fattorino)");
			ImGui::TableNextColumn();
			ImGui::Text("ImNodeFlow - the basis for the custom node graph");
			ImGui::TableNextColumn();
			ImGui::Text("https://github.com/Fattorino/ImNodeFlow");
			ImGui::TableNextColumn();

			ImGui::Text("SDL");
			ImGui::TableNextColumn();
			ImGui::Text("Multi-platform low level windowing");
			ImGui::TableNextColumn();
			ImGui::Text("https://www.libsdl.org/");
			ImGui::TableNextColumn();

			ImGui::Text("Benoit Blanchon");
			ImGui::TableNextColumn();
			ImGui::Text("dllhelper");
			ImGui::TableNextColumn();
			ImGui::Text("https://github.com/bblanchon/dllhelper");
			ImGui::TableNextColumn();

			ImGui::Text("mpark");
			ImGui::TableNextColumn();
			ImGui::Text("C++14 compatible std::variant for NT5 support");
			ImGui::TableNextColumn();
			ImGui::Text("https://github.com/mpark/variant");
			ImGui::TableNextColumn();

			// more to come!

			// ffainelli.github.io/openal-example/
			// https://indiegamedev.net/2020/01/16/how-to-stream-ogg-files-with-openal-in-c/

			ImGui::EndTable();
		}

		ImGui::Unindent();
		ImGui::Separator();

		ImGui::Text("This project source is released under the zlib license");
		ImGui::SameLine();
		if ( ImGui::Button("View zlib") )
		{
			my_open_source_license = true;
		}
		ImGui::SameLine();
		if ( ImGui::Button("Close###About") )
		{
			_gui_interactions.show_about = false;
			ImGui::CloseCurrentPopup();
		}

		ImGui::EndPopup();
	}

	if ( my_open_source_license )
	{
		TZK_LOG(LogLevel::Trace, "Opening license popup");
		ImGui::OpenPopup(license_popup);
		my_open_source_license = false;
	}

	if ( ImGui::BeginPopupModal(license_popup) )
	{
		// RichEdit style here would be preferred
		ImGui::Text(
			"Copyright (C) 2014-2025 James Warren, Trezanik Developers"
			"\n\n"
			"This software is provided 'as-is', without any express or implied "
			"warranty. In no event will the authors be held liable for any damages "
			"arising from the use of this software.\n\n"
			"Permission is granted to anyone to use this software for any purpose, "
			"including commercial applications, and to alter it and redistribute it "
			"freely, subject to the following restrictions :"
			"\n\n"
			"1. The origin of this software must not be misrepresented; you must not"
			" claim that you wrote the original software. If you use this software"
			" in a product, an acknowledgment in the product documentation would be"
			" appreciated but is not required.\n"
			"2. Altered source versions must be plainly marked as such, and must not be"
			" misrepresented as being the original software.\n"
			"3. This notice may not be removed or altered from any source distribution."
		);

		if ( ImGui::Button("Close###License") )
		{
			TZK_LOG(LogLevel::Trace, "Closing license popup");
			ImGui::CloseCurrentPopup();
			// reopen the about dialog
			my_open = true;
		}
		ImGui::EndPopup();
	}
}


int
ImGuiAboutDialog::ProcessEvent(
	trezanik::engine::IEvent* event
)
{
	using namespace trezanik::engine;

	if ( event->GetDomain() == EventType::Domain::Engine )
	{
		switch ( event->GetType() )
		{
		case EventType::ResourceState:
			{
				auto r = reinterpret_cast<EventData::Engine_ResourceState*>(event->GetData());
				if ( r->state == ResourceState::Ready )
				{
					auto res = Context::GetSingletonPtr()->GetResourceCache().GetResource(r->id);

					if ( res->GetResourceID() == my_icon_resource_id )
					{
						my_icon = std::dynamic_pointer_cast<Resource_Image>(res);
					}
				}
			}
			break;
		default:
			break;
		}
	}

	return ErrNONE;
}


} // namespace app
} // namespace trezanik

#endif  // TZK_USING_IMGUI
