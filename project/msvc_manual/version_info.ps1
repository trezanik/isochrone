Param (
 [String]$ProjectName,
 [String]$ProjectFolder,
 [String]$GitRoot,
 [String]$HeaderFile="version.h",
 [String]$URLPrefix="https://github.com/trezanik/isochrone/commits/master/"
)

Push-Location -LiteralPath $GitRoot

$FileHead = "`#pragma once`n`n// This file is automatically generated with each build; any changes will be lost!`n`n`#include <string>`n`#include `"version.tt`"`n`nnamespace trezanik {`nnamespace $ProjectName {`n"
$FileTail = "}`n}`n"

# If git identifies changes not committed, the build is considered dirty, as the commit id != the actual code
$dirty_flag = ((git ls-files --exclude-standard -d -m -o -k) | Measure-Object -Line).Lines

# obtain the values we're to use within our strings that end up embedded; note: gitlog includes a LF in its output
$gitval_copyright   = (git log -n 1 --format=format:"%an <%ae>") | Out-String
$gitval_commit_hash = (git log -n 1 --format=format:"%H") | Out-String
$gitval_commit_date = (git log -n 1 --date=short --format=format:"%ad") | Out-String
$gitval_abbrev_hash = (git log -n 1 --date=short --format=format:"%h") | Out-String
# remove the newlines...
$gitval_copyright   = $gitval_copyright   -replace "`n|`r","";
$gitval_commit_hash = $gitval_commit_hash -replace "`n|`r","";
$gitval_commit_date = $gitval_commit_date -replace "`n|`r","";
$gitval_abbrev_hash = $gitval_abbrev_hash -replace "`n|`r","";

# VERSION_INFO inside resource scripts can't use variables, so we have to provide definitions, which we assign to variables; sucky
$def_stringify1 = "`#define TZK_STRINGIFY(txt)  TZK_REAL_TEXT(txt)`n"
$def_stringify2 = "`#define TZK_REAL_TEXT(txt)  `#txt`n"
$def_prod_ver  = "`#define TZK_PROJECT_PROD_VER  TZK_STRINGIFY(TZK_PROJECT_VERSION_MAJOR) `".`" TZK_STRINGIFY(TZK_PROJECT_VERSION_MINOR) `".$gitval_commit_date.$gitval_abbrev_hash`"`n`n"

$repo_url  = "`tconst std::string  url = `"$URLPrefix$gitval_commit_hash`";`n"
$file_ver  = "`tconst std::string  file_version = TZK_STRINGIFY(TZK_PROJECT_VERSION_MAJOR) `".`" TZK_STRINGIFY(TZK_PROJECT_VERSION_MINOR);`n"
$prod_ver  = "`tconst std::string  product_version = TZK_PROJECT_PROD_VER;`n"
$copyright = "`tconst std::string  copyright = `"$gitval_copyright`";`n"
if ( $dirty_flag -gt 0 ) {
	$dirty = "`tconst bool         dirty = true;`n"
} else {
	$dirty = "`tconst bool         dirty = false;`n"
}

# could include things like the build options here, everything applicable within the props files?

# Note: if > 80 characters, visual studio expands this on a newline in the build output!
# This occurs on Windows 7 (old style console), not on Windows 10 (new style console)
"Generated file ${GitRoot}src/$ProjectName/" + (
  New-Item -Force -Path "${GitRoot}src/$ProjectName" -Name "$HeaderFile" -ItemType "file" -Value "$FileHead$def_stringify1$def_stringify2$def_prod_ver$repo_url$file_ver$prod_ver$copyright$dirty$FileTail"
).Name

Pop-Location
